import{_ as o}from"./plugin-vue_export-helper.21dcd24c.js";import{r as i,o as p,c,a as n,e as t,F as l,f as e,b as s}from"./app.af021222.js";const r={},d=e(`<h2 id="inspec-examples" tabindex="-1"><a class="header-anchor" href="#inspec-examples" aria-hidden="true">#</a> Inspec Examples</h2><h3 id="rspec-explicit-subject" tabindex="-1"><a class="header-anchor" href="#rspec-explicit-subject" aria-hidden="true">#</a> rSpec Explicit Subject</h3><p>Here we have a inspec test that lists out it&#39;s current directory. Our original test code looks like this</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>describe command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;ls -al&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>strip <span class="token keyword">do</span>
  it <span class="token punctuation">{</span> should_not be_empty <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),u=s("If we would like to have a more "),k={href:"https://relishapp.com/rspec/rspec-core/docs/subject/explicit-subject",target:"_blank",rel:"noopener noreferrer"},h=s("Explicit Subject"),b=s(" then we could refactor the code like this example"),m=e(`<div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>describe <span class="token string-literal"><span class="token string">&quot;this is a detailed message&quot;</span></span> <span class="token keyword">do</span>
  subject <span class="token punctuation">{</span> command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;ls -al&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>strip <span class="token punctuation">}</span>
  it<span class="token punctuation">{</span> should_not be_empty <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="looping-through-data" tabindex="-1"><a class="header-anchor" href="#looping-through-data" aria-hidden="true">#</a> Looping Through Data</h3><p>For looping through a file directory, the directory resource is not powerful enough to do that, so we are required to use the <code>command</code> resource and run a <code>find</code> or it&#39;s equivalent for your target OS. This can be very resource intensive on your target so try to be as specific as possible with your search such as the example below:</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>command<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;find ~/* -type f -maxdepth 0 -xdev&#39;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>split<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>fname<span class="token operator">|</span>
  describe file<span class="token punctuation">(</span>fname<span class="token punctuation">)</span> <span class="token keyword">do</span>
    its<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;owner&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> should cmp <span class="token string-literal"><span class="token string">&#39;ec2-user&#39;</span></span> <span class="token punctuation">}</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="the-should-vs-expect-syntax" tabindex="-1"><a class="header-anchor" href="#the-should-vs-expect-syntax" aria-hidden="true">#</a> The <code>should</code> vs. <code>expect</code> syntax</h3><p>Users familiar with the RSpec testing framework may know that there are two ways to write test statements: <code>should</code> and <code>expect</code>. The RSpec community decided that <code>expect</code> is the preferred syntax.</p><p>InSpec recommends the <code>should</code> syntax as it tends to read more easily to those users who are not as technical, however there are times when the <code>expect</code> syntax will communicate much more clearly to the end-user.</p><p>InSpec will continue to support both methods of writing tests. Consider this file test:</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>describe file<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/tmp/test.txt&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  it <span class="token punctuation">{</span> should be_file <span class="token punctuation">}</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>This can be re-written with expect syntax</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>describe file<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/tmp/test.txt&#39;</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  it <span class="token string-literal"><span class="token string">&#39;should be a file&#39;</span></span> <span class="token keyword">do</span>
    expect<span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>be_file<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The output of both of the above examples looks like this:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>File /tmp/test.txt
   \u2714  should be a <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition, you can make use of the <code>subject keyword</code> to further control your output if you choose:</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>describe <span class="token string-literal"><span class="token string">&#39;test file&#39;</span></span> <span class="token keyword">do</span>
  subject <span class="token punctuation">{</span> file<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;/tmp/test.txt&#39;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
  it <span class="token string-literal"><span class="token string">&#39;should be a file&#39;</span></span> <span class="token keyword">do</span>
    expect<span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>be_file<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u2026 which will render the following output:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token builtin class-name">test</span> <span class="token function">file</span>
  \u2714  should be a fill
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,17),v=s("Reference: "),g={href:"https://docs.chef.io/inspec/profiles/",target:"_blank",rel:"noopener noreferrer"},y=s("https://docs.chef.io/inspec/profiles/"),w=e(`<h3 id="expect-syntax-and-password-hashes" tabindex="-1"><a class="header-anchor" href="#expect-syntax-and-password-hashes" aria-hidden="true">#</a> <code>Expect syntax</code> and Password Hashes</h3><p>Here we have an inspec test that checks if passwords are SHA512 hashes. As a quick thought exercise can you think of how we can adjust the control below to support SHA512 or higher assuming where you are testing uses SHA1024 or even SHA2048?</p><div class="language-ruby ext-rb line-numbers-mode"><pre class="language-ruby"><code>bad_users <span class="token operator">=</span> inspec<span class="token punctuation">.</span>shadow<span class="token punctuation">.</span>where <span class="token punctuation">{</span> password <span class="token operator">!=</span> <span class="token string-literal"><span class="token string">&quot;*&quot;</span></span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">!=</span> <span class="token string-literal"><span class="token string">&quot;!&quot;</span></span> <span class="token operator">&amp;&amp;</span> password <span class="token operator">!~</span> <span class="token regex-literal"><span class="token regex">/\\$6\\$/</span></span> <span class="token punctuation">}</span><span class="token punctuation">.</span>users

describe <span class="token string-literal"><span class="token string">&#39;Password hashes in /etc/shadow&#39;</span></span> <span class="token keyword">do</span>
  it <span class="token string-literal"><span class="token string">&#39;should only contain SHA512 hashes&#39;</span></span> <span class="token keyword">do</span>
    failure_message <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;Users without SHA512 hashes: </span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">bad_users<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&#39;, &#39;</span></span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">}</span></span><span class="token string">&quot;</span></span>
    expect<span class="token punctuation">(</span>bad_users<span class="token punctuation">)</span><span class="token punctuation">.</span>to be_empty<span class="token punctuation">,</span> failure_message
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function f(x,_){const a=i("ExternalLinkIcon");return p(),c(l,null,[d,n("p",null,[u,n("a",k,[h,t(a)]),b]),m,n("p",null,[v,n("a",g,[y,t(a)])]),w],64)}var q=o(r,[["render",f],["__file","08.html.vue"]]);export{q as default};
